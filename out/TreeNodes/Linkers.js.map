{"version":3,"sources":["../src/TreeNodes/Linkers.ts"],"names":[],"mappings":";;AAAA,iBAAiB;AACjB,kDAA8C;AAC9C,2CAAwC;AACxC,yCAAqC;AACrC,6CAA2C;AAO3C;;EAEE;AACF,uBAA8B,MAAkB;IAC5C,oCAAoC;IACpC,IAAG,CAAC,MAAM,CAAC,MAAM;QAAE,OAAO;IAE1B,sBAAsB;IACtB,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,KAAI,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,EAAC;QAC3C,CAAC,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;KAC5E;IAED,kCAAkC;IAClC,KAAI,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,EAAC;QAC3C,IAAG,gBAAM,CAAC,aAAK,CAAC,GAAG,EAAE,EAAC,KAAK,EAAC,CAAC,EAAE,MAAM,EAAC,CAAC,EAAC,EAAE,MAAM,CAAC,GAAG,EAAE,EAAC,KAAK,EAAE,MAAM,CAAC,MAAM,GAAC,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,GAAC,CAAC,EAAC,CAAC,EAAC;YACrG,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;YAEnB,kCAAkC;YAClC,oBAAoB;YACpB,IAAG,aAAK,CAAC,MAAM,EAAC;gBACZ,qBAAa,GAAG,MAAM,CAAC;gBACvB,qBAAa,CAAC,MAAM,GAAG,MAAM,CAAC;aACjC;SACJ;aAAI;YACD,MAAM,CAAC,OAAO,GAAG,aAAa,CAAC;SAClC;KACJ;AACL,CAAC;AAzBD,sCAyBC;AAED;;GAEG;AACH;IACI,YAAY;IACZ,IAAI,OAAO,GAAG,qBAAa,CAAC,MAAM,CAAC;IAEnC,qBAAqB;IACrB,qBAAa,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IAEnC,qBAAqB;IACrB,UAAG,CAAC,SAAS,EAAE,CAAC;IAChB,UAAG,CAAC,WAAW,GAAG,OAAO,OAAO,CAAC,IAAI,GAAG,CAAC;IACzC,UAAG,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACzC,UAAG,CAAC,MAAM,CAAC,aAAK,CAAC,GAAG,CAAC,CAAC,EAAE,aAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,UAAG,CAAC,MAAM,EAAE,CAAC;IACb,UAAG,CAAC,SAAS,EAAE,CAAC;IAEhB,kCAAkC;IAClC,IAAG,CAAC,aAAK,CAAC,MAAM,EAAC;QACb,wCAAwC;QACxC,0BAA0B;QAC1B,mCAAmC;QACnC,IAAI,OAAO,GAAG,qBAAa,CAAC,MAAM,CAAC;QACnC,IAAI,OAAO,GAAG,kBAAQ,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC;QAE7C,+BAA+B;QAC/B,IAAG,OAAO,EAAC;YACP,2BAA2B;YAC3B,IAAG,OAAO,CAAC,IAAI,IAAI,OAAO,EAAC;gBACvB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAC1B,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;aAC9B;YACD,oBAAoB;iBACf,IAAG,OAAO,CAAC,IAAI,IAAI,SAAS,EAAC;gBAC9B,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBAC5B,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aAC/B;YAED,yBAAyB;YACzB,kBAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;SAClC;QAED,+BAA+B;QAC/B,qBAAa,GAAG,IAAI,CAAC;KACxB;AACL,CAAC;AA3CD,8BA2CC","file":"Linkers.js","sourcesContent":["// Module Imports\r\nimport { within } from '../Utilities/Vectors';\r\nimport { mouse } from '../Events/Mouse';\r\nimport { ctx } from '../Canvas/Core';\r\nimport { nodeTree } from '../Core/Preload';\r\nimport { ActiveNode } from '../Utilities/interfaces';\r\n\r\n// Linker Members\r\nexport let secondaryNode: ActiveNode;\r\n\r\n\r\n/** Activates Linkers (Properties)\r\n * @param member -Active Member\r\n*/\r\nexport function handleLinkers(member: ActiveNode): void {\r\n    // Make sure there is a valid member\r\n    if(!member.member) return;\r\n\r\n    // Find lowest opacity\r\n    let lowestOpacity = 1;\r\n    for(const linker of member.member.getLinkers()){\r\n        (linker.opacity < lowestOpacity) ? lowestOpacity = linker.opacity : null;\r\n    }\r\n\r\n    // Activate Linkers when mouseover\r\n    for(const linker of member.member.getLinkers()){\r\n        if(within(mouse.pos, {width:0, height:0}, linker.pos, {width: linker.radius*2, height: linker.radius*2})){\r\n            linker.opacity = 1;\r\n\r\n            // Set current Active to Secondary\r\n            // Set Active Linker\r\n            if(mouse.isDown){\r\n                secondaryNode = member;\r\n                secondaryNode.linker = linker;\r\n            }\r\n        }else{\r\n            linker.opacity = lowestOpacity;\r\n        }\r\n    }\r\n}\r\n\r\n/** Links and Draws the Linking Nodes of Members\r\n * Connects the two members when mouse is released if there is another member\r\n */\r\nexport function linkNodes(): void {\r\n    // Variables\r\n    let nodePos = secondaryNode.linker;\r\n\r\n    // Keep Linkers Drawn\r\n    secondaryNode.member.drawLinkers();\r\n\r\n    // Draw Linking Lines\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = `rgb(${nodePos.fill})`;\r\n    ctx.moveTo(nodePos.pos.x, nodePos.pos.y);\r\n    ctx.lineTo(mouse.pos.x, mouse.pos.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n\r\n    // Link to member on mouse release\r\n    if(!mouse.isDown){\r\n        // Keep track of potential linked member\r\n        // member1 -> Current Node\r\n        // member2 -> Other Node to Link to\r\n        let member1 = secondaryNode.member;\r\n        let member2 = nodeTree.activeMember().member;\r\n\r\n        // Make sure there is a member2\r\n        if(member2){\r\n            // Add Child & Parent Links\r\n            if(nodePos.type == \"child\"){\r\n                member1.addChild(member2);\r\n                member2.addParent(member1);\r\n            }\r\n            // Add Partner Links\r\n            else if(nodePos.type == \"partner\"){\r\n                member1.addPartner(member2);\r\n                member2.addPartner(member1);\r\n            }\r\n\r\n            // Organize the Node Tree\r\n            nodeTree.organizeNode(member1);\r\n        }\r\n\r\n        // Finished with Secondary Node\r\n        secondaryNode = null;\r\n    }\r\n}"]}