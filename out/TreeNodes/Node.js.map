{"version":3,"sources":["../src/TreeNodes/Node.ts"],"names":[],"mappings":"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","file":"Node.js","sourcesContent":["// Interface Imports\r\nimport { Size2D, Linker, NodeRelation } from '../Utilities/interfaces';\r\nimport { Vector2D, createVector, dist, within } from '../Utilities/Vectors';\r\nimport { WIDTH } from '../Core/Constants';\r\n\r\n// Node Properties\r\nexport const relationDistance = WIDTH;             // Distance required to connect to related Node\r\nexport const size: Size2D = {\r\n    width: 80,\r\n    height: 80\r\n};\r\n\r\n\r\n/** Node Member Class\r\n * Contains data each Member should have\r\n * Each member has a Unique ID and Relation to other members\r\n */\r\nexport class NodeMember {\r\n    // Public Variables\r\n    public uniqueID: string;\r\n    \r\n    // Private Variables\r\n    private ctx: CanvasRenderingContext2D;\r\n    private img: HTMLImageElement;\r\n    private pos: Vector2D;\r\n    private size: Size2D;\r\n    private linkers: Linker[];\r\n    private relation: NodeRelation;\r\n\r\n\r\n    /** Default Constructor\r\n     * @constructor Initializes All required Elements\r\n     * @param canvasContext CanvasRenderingContext2D used to draw\r\n     * @param image Node Image Asset\r\n     * @param loc A Vector2D Object for the Node's Location to be drawn\r\n     * @param size A Size2D Object for the Node's Asset Size\r\n     * @param relDist The Distance required to connect to another Node Member\r\n    */\r\n    constructor(canvasContext: CanvasRenderingContext2D, image: HTMLImageElement, loc: Vector2D, size: Size2D, relDist: number){\r\n        // Node Unique Data\r\n        this.uniqueID = ID();\r\n\r\n        // Assigning Variables\r\n        this.ctx = canvasContext;\r\n        this.img = new Image();\r\n        this.pos = loc;\r\n        this.size = size;\r\n        this.img = image;\r\n        \r\n        // Node Relation Data\r\n        this.relation = { \r\n            attatchAtDist: relDist, \r\n            children: [], \r\n            parents: [], \r\n            isParent: false, \r\n            partners: [],\r\n            highlightNodes: false\r\n        };\r\n\r\n        // Initiate Linkers\r\n        this.initLinkers();\r\n    }\r\n    \r\n    /** Checks if the position is inside the node's parameters\r\n     * @param pos A Vector2D for the location that will be tested onto current Node member\r\n     * @returns Returns a Boolean based on the state of position in relation to current Node location\r\n     */ \r\n    public onNode(pos: Vector2D): Boolean {\r\n        return within(pos, { width: 0, height:0 }, this.pos, this.size);\r\n    }\r\n\r\n    /** Draws the image onto the canvas */\r\n    public draw(): void {\r\n        // Draw the Node Image\r\n        this.ctx.drawImage(this.img, this.pos.x - (this.size.height / 2), this.pos.y - (this.size.height / 2), this.size.width, this.size.height);\r\n    }\r\n\r\n    /** Updates Data for Node */\r\n    public update(): void {\r\n        // Display the Connections to secondary Node\r\n        this.drawRelation();\r\n\r\n        // Set Parent State\r\n        this.relation.isParent = Boolean(this.relation.children.length);\r\n    }\r\n\r\n    /** Checks if Node has any Parents (true/false)\r\n     * @returns Returns true if Parents length > 0\r\n     * @returns Returns false if Parents length is 0\r\n    */\r\n    public hasParent(): Boolean {\r\n        if(this.relation.parents.length > 0) return true;\r\n        else return false;\r\n    }\r\n\r\n    /** Checks if Node has any Children (true/false)\r\n     * @returns Returns true if Children length > 0\r\n     * @returns Returns false if Children length is 0\r\n    */\r\n    public hasChildren(): Boolean {\r\n        if(this.relation.children.length > 0) return true;\r\n        else return false;\r\n    }\r\n\r\n    /** Check if Node is a Parent\r\n     * @returns Boolean if Parent\r\n     */\r\n    public isParent(): Boolean {\r\n        return this.relation.isParent;\r\n    }\r\n\r\n    /** Adds a Parent to current Node \r\n     * @param parent -Parent of Node\r\n    */\r\n    public addParent(parent: NodeMember): void {\r\n        // Make sure it's unique\r\n        // A parent can't be the child nor the partner as well\r\n        if(!this.isUnique(parent, \"all\")) return;\r\n\r\n        // Make sure not to add Node to itself\r\n        if(parent.uniqueID != this.uniqueID)\r\n            this.relation.parents.push(parent);\r\n    }\r\n\r\n    /** Adds a Child to current Node \r\n     * @param child -Child of Node\r\n    */\r\n    public addChild(child: NodeMember): void {\r\n        // Make sure it's unique\r\n        // A child can't be the parent nor the partner as well\r\n        if(!this.isUnique(child, \"all\")) return;\r\n\r\n        // Make sure not to add Node to itself\r\n        if(child.uniqueID != this.uniqueID)\r\n            this.relation.children.push(child);\r\n    }\r\n    \r\n    /** Adds a Partner to current Node\r\n     * Adds partner to Relation\r\n     * @param partner The Partner of current Node\r\n     */\r\n    public addPartner(partner: NodeMember): void {\r\n        // Make sure it's unique\r\n        if(!this.isUnique(partner, \"all\")) return;\r\n        \r\n        // Make sure not to add Itself\r\n        if(partner.uniqueID != this.uniqueID){\r\n            this.relation.partners.push(partner);\r\n        }\r\n    }\r\n\r\n    /** Removes Parents based on uniqueID \r\n     * @param parentID Parent Node's Unique ID\r\n    */\r\n    public removeParent(parentID: string): void {\r\n        for(let x=0; x < this.relation.parents.length; x++) {\r\n            if(this.relation.parents[x].uniqueID == parentID){\r\n                this.relation.parents.splice(x, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Removes Partner based on uniqueID \r\n     * @param partnerID The Unique ID of Partner Node\r\n    */\r\n    public removePartner(partnerID: string): void {\r\n        for(let x=0; x < this.relation.partners.length; x++) {\r\n            if(this.relation.partners[x].uniqueID == partnerID){\r\n                this.relation.partners.splice(x, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Displays the Paths to Children Nodes\r\n     * Draws Connection line between Children and Parents\r\n     * Draws Connection line between Partners\r\n    */\r\n    private drawRelation(): void {\r\n        // Assign the Linkers\r\n        const CHILD_CLR         = this.linkers[2].fill;\r\n        const PARTNER_CLR       = this.linkers[0].fill;\r\n        const HIGHLIGHT_CLR     = \"rgba(255, 255, 255, 0.6)\";\r\n\r\n        // Varialbes\r\n        const topSpace          = this.size.height * 0.7; // Space over each node for the line to curve in\r\n\r\n\r\n\r\n        // Draw Relation from Parent to Child & Remove if seperated\r\n        for (let x = 0; x < this.relation.children.length; x++) {\r\n            // Get Child Node Position\r\n            let node = this.relation.children[x].getPosition();\r\n\r\n            // Highlighted Tree Branch Line\r\n            if(this.relation.highlightNodes){\r\n                this.ctx.lineWidth = 5;\r\n                this.ctx.strokeStyle = HIGHLIGHT_CLR;\r\n                drawTreeBranch(this.pos, node, topSpace, this.ctx);\r\n            }\r\n\r\n            // Draw Tree Branch Line\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.strokeStyle = `rgb(${CHILD_CLR})`;\r\n            drawTreeBranch(this.pos, node, topSpace, this.ctx);\r\n\r\n\r\n            // Check if the Node connection is far to break the chain\r\n            if (dist(this.pos.x, this.pos.y, node.x, node.y) > this.relation.attatchAtDist) {\r\n                this.relation.children[x].removeParent(this.uniqueID);  // Remove Parent from Child\r\n                this.relation.children.splice(x, 1);                    // Break the chain of this child\r\n            }\r\n        }\r\n\r\n        // Draw Relation from Partner to Partner & Remove if seperated\r\n        for (let x=0; x<this.relation.partners.length; x++) {\r\n            // Get Partner Node Positions\r\n            let node = this.relation.partners[x].getPosition();\r\n\r\n            // Highlighted Line\r\n            if(this.relation.highlightNodes){\r\n                this.ctx.lineWidth = 4;\r\n                this.ctx.strokeStyle = HIGHLIGHT_CLR;\r\n                drawLine(this.pos, node, this.ctx);\r\n            }\r\n\r\n            // Draw Path\r\n            this.ctx.lineWidth = 2;\r\n            this.ctx.strokeStyle = `rgb(${PARTNER_CLR})`;\r\n            drawLine(this.pos, node, this.ctx);\r\n\r\n            // Check if Node connect is far to break chain\r\n            if((dist(this.pos.x, this.pos.y, node.x, node.y) > this.relation.attatchAtDist)){\r\n                this.relation.partners[x].removePartner(this.uniqueID);\r\n                this.relation.partners.splice(x, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Draws the Node's Properties\r\n     * Displays circles where linking properties are located\r\n    */\r\n    public drawLinkers(): void {// Manually Setup Linkers Data\r\n        this.linkers[0].pos.x = this.pos.x - (this.size.width / 3);\r\n        this.linkers[0].pos.y = this.pos.y;\r\n        this.linkers[1].pos.x = this.pos.x + (this.size.width / 3);\r\n        this.linkers[1].pos.y = this.pos.y;\r\n        this.linkers[2].pos.x = this.pos.x;\r\n        this.linkers[2].pos.y = this.pos.y + (this.size.height / 4 + 5);\r\n\r\n\r\n        // Draw Linkers\r\n        this.ctx.lineWidth = 1;\r\n\r\n        for (let x=0; x<this.linkers.length; x++) {\r\n            this.ctx.beginPath();\r\n\r\n            this.ctx.strokeStyle    = `rgba(${this.linkers[x].stroke}, ${this.linkers[x].opacity})`;\r\n            this.ctx.fillStyle      = `rgba(${this.linkers[x].fill}, ${this.linkers[x].opacity})`;\r\n\r\n            this.ctx.arc(this.linkers[x].pos.x, this.linkers[x].pos.y, this.linkers[x].radius, 0, Math.PI * 2);\r\n\r\n            this.ctx.stroke();\r\n            this.ctx.fill();\r\n\r\n            this.ctx.beginPath();\r\n        }\r\n    }\r\n\r\n    /** Initializes the Linkers' basic properties */\r\n    private initLinkers(): void {\r\n        // Initialize the Linkers as an array\r\n        this.linkers = [];\r\n\r\n        // 3 Linkers\r\n        // Location setup in drawLinkers\r\n        this.linkers.push({             // Partner1\r\n            pos: createVector(),\r\n            radius: 3,\r\n            type: \"partner\",\r\n            fill: \"245, 242, 220\",\r\n            opacity: 0.2,\r\n            stroke: \"0, 88, 94\"\r\n        });\r\n\r\n        this.linkers.push({             // Partner2\r\n            pos: createVector(),\r\n            radius: 3,\r\n            type: \"partner\",\r\n            fill: \"245, 242, 220\",\r\n            opacity: 0.2,\r\n            stroke: \"0, 88, 94\"\r\n        });\r\n\r\n        this.linkers.push({             // Child\r\n            pos: createVector(),\r\n            radius: 2,\r\n            type: \"child\",\r\n            fill: \"0, 88, 94\",\r\n            opacity: 0.2,\r\n            stroke: \"0, 88, 94\"\r\n        });\r\n    }\r\n\r\n    \r\n    /** Checks if Node is a Unique Related Node based on Type\r\n     * Loops through all Related Nodes making sure not the same one\r\n     * @param node Node Member that will be checked to all Related Nodes\r\n     * @param type Type of Node Member to Check (\"child\" | \"parent\" | \"partner\" | \"all\")\r\n     * @returns A Boolean if the node is Unique\r\n    */\r\n    private isUnique(node: NodeMember, type: string): Boolean {\r\n        // Check Children\r\n        if(type == \"child\" || type == \"all\"){\r\n            for (let x=0; x<this.relation.children.length; x++) {\r\n                if(this.relation.children[x].uniqueID == node.uniqueID){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check Partner\r\n        if(type == \"partner\" || type == \"all\"){\r\n            for (let x=0; x<this.relation.partners.length; x++) {\r\n                if (this.relation.partners[x].uniqueID == node.uniqueID){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check Parent\r\n        if(type == \"parent\" || type == \"all\"){\r\n            for (let x=0; x<this.relation.parents.length; x++) {\r\n                if (this.relation.parents[x].uniqueID == node.uniqueID){\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n/* Setters and Getters */\r\n    /** Sets the Position of the Node \r\n     * @param pos A Vector2D Location to where to place current Node\r\n     */ \r\n    public setPosition(pos: Vector2D): void {\r\n        this.pos = pos;\r\n    }\r\n\r\n    /** Sets the Size of the Node \r\n     * @param size A Size2D Object to set Node's size property\r\n    */\r\n    public setSize(size: Size2D): void {\r\n        this.size = size;\r\n    }\r\n\r\n    /** Sets the Highlight State of Relation Nodes\r\n     * @param state Highlight Nodes (true/false)\r\n     */\r\n    public setHighlight(state: Boolean): void {\r\n        this.relation.highlightNodes = state;\r\n    }\r\n\r\n\r\n    /** Returns the current Position of the Node \r\n     * @returns Current Position of the Node\r\n    */\r\n    public getPosition(): Vector2D {\r\n        return this.pos;\r\n    }\r\n\r\n    /** Returns the current Size of the Node \r\n     * @returns Size2D Object of the current Node's\r\n    */\r\n    public getSize(): Size2D {\r\n        return this.size;\r\n    }\r\n\r\n    /** Returns Linkers Object Array for Node \r\n     * @returns Linkers Object Array for current Node\r\n    */\r\n    public getLinkers(): Linker[] {\r\n        return this.linkers;\r\n    }\r\n\r\n    /** Returns Children of Node \r\n     * @returns Children Nodes Array\r\n    */\r\n    public getChildren(): NodeMember[] {\r\n        return this.relation.children;\r\n    }\r\n\r\n    /** Returns Parents of Node \r\n     * @returns Parent Nodes Array\r\n    */\r\n    public getParents(): NodeMember[] {\r\n        return this.relation.parents;\r\n        }\r\n\r\n    /** Returns Partners of Node \r\n         * @returns Partner Nodes Array\r\n        */\r\n    public getPartners(): NodeMember[] {\r\n        return this.relation.partners;\r\n        }\r\n\r\n    /** Returns the Relation Object \r\n         * @returns Relation Object of Node\r\n        */\r\n    public getRelations(): NodeRelation {\r\n        return this.relation;\r\n    }\r\n}\r\n\r\n/** Generates and Returns a Unique String ID \r\n * @returns A Unique String ID\r\n*/\r\nfunction ID() {\r\n    return '_' + Math.random().toString(32).substr(2, 9);\r\n}\r\n\r\n/** Draws a Line from a Vector to another \r\n * @param vec1 First Vector2D Object\r\n * @param vec2 Second Vector2D Object\r\n * @param ctx CanvasRenderingContext2D onto which to draw the line\r\n*/\r\nfunction drawLine(vec1: Vector2D, vec2: Vector2D, ctx: CanvasRenderingContext2D): void {\r\n    ctx.beginPath();\r\n    ctx.moveTo(vec1.x, vec1.y);\r\n    ctx.lineTo(vec2.x, vec2.y);\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\n\r\n/** Draws a Branch Like Line from Parent to Child \r\n * @param vec1 Main Vector point to draw from (Parent)\r\n * @param vec2 Second Vector point to draw to (Child)\r\n * @param spaceOffset The space above child vector for line to start curving in\r\n * @param ctx The main Canvas 2D Drawing Context\r\n*/\r\nfunction drawTreeBranch(vec1: Vector2D, vec2: Vector2D, spaceOffset: number, ctx: CanvasRenderingContext2D): void {\r\n    // Line from Vec1 to Vec2 but with the Space Offset overhead\r\n    let pos     = createVector(vec1.x, vec2.y - spaceOffset);\r\n    drawLine(vec1, pos, ctx);\r\n    \r\n    // From the Space Offset point to right above Vec2\r\n    // Then Down to Vec2's Position\r\n    pos         = createVector(vec1.x, vec2.y - spaceOffset);\r\n    let pos2    = createVector(vec2.x, vec2.y - spaceOffset);\r\n\r\n    drawLine(pos, pos2, ctx);\r\n    drawLine(pos2, vec2, ctx);\r\n}"]}